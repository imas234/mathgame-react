{"version":3,"sources":["components/gamepage/Timer.jsx","components/gamepage/Expression.jsx","components/gamepage/Options.jsx","components/gamepage/Score.jsx","components/GamePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","onReset","setTimeOver","useState","seconds","setSeconds","timerID","useRef","useEffect","tick","clearTimeout","current","setTimeout","Fragment","className","onClick","Expression","exp","map","x","index","Options","answer","random","isDisabled","options","setOptions","reorderOptions","generateOptions","opt","selectedOrder","Math","floor","result","solve","roll","length","op","selected","evaluate","String","Score","points","GamePage","props","mathOp","setExp","timeOver","generateExpression","getNum","max","n","correct","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee38089b.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\n\nfunction Timer({onReset, setTimeOver}) {\n    const DEFAULT_TIME = 10;\n    const [seconds, setSeconds] = useState(DEFAULT_TIME);\n    const timerID = useRef();\n\n    useEffect(()=>{\n        tick();\n        return clearTimeout(timerID.current);\n    }, []);\n\n    useEffect(()=>{\n        if(seconds === 0) setTimeOver(true);\n        clearTimeout(timerID.current);\n        tick();\n    }, [seconds]);\n\n    const tick = () => {\n        if(seconds === 0) return;\n        timerID.current = setTimeout(()=>{\n            setSeconds(seconds - 1);            \n        }, 1000);\n    };\n\n    const reset = () => {\n        // testing onReset\n        onReset();\n        \n        // resets timer\n        clearTimeout(timerID.current);\n        setSeconds(DEFAULT_TIME);\n        tick();       \n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <p className=\"timer\">{seconds === 0 ? \"-\" : seconds}</p>\n            </div>\n            <div className=\"bottom\">\n                <button className={\"reset\"} onClick={reset}>{seconds === 0 ? \"Play Again\" : \"Reset\"}</button>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Timer;","import React from 'react';\n\nconst Expression = ({exp}) => {\n    return (\n        <div className=\"exp-container\">\n            {exp.map((x, index) => <span className=\"exp\" key={index}>{x}</span>) }\n        </div>\n    );\n}\n\nexport default Expression;","import React, { useEffect, useState } from 'react';\n\nconst Options = ({exp, answer, random, isDisabled}) => {\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n        setOptions(\n            reorderOptions(\n                generateOptions()\n            )\n        );\n    },[]);\n\n    useEffect(() => {\n        setOptions(\n            reorderOptions(\n                generateOptions()\n            )\n        );\n    },[exp]);\n\n    const reorderOptions = (opt) => {\n        const orders = [123, 132, 312, 321, 231, 213];\n        const selectedOrder = orders[random(6)];\n\n        const reorderedOptions = [\n            opt[Math.floor(selectedOrder / 100) - 1],\n            opt[Math.floor(selectedOrder % 100 / 10) - 1],\n            opt[selectedOrder % 10 - 1],\n        ];\n\n        return reorderedOptions;\n    };\n\n    const generateOptions = () => {\n        const result = solve();\n        let roll = random(3);\n        while(roll === 2 && result < 8) {\n            roll = random(3);\n        }\n        if(roll === 1){\n            return [result, result + 1, result + 2];\n        }\n        if(roll === 2){\n            return [result, result - 2, result - 1];\n        }\n        return [result, result - 1, result + 1];        \n    };\n\n    const solve = () => {\n        if(exp[1] === \"+\") return exp[0] + exp[2];\n    };\n\n    const evaluate = (selected) => {\n        const result = solve();\n        answer(selected === result);\n    }\n\n    return (\n        <div className=\"options-container\">\n            { options.length > 0 ? options.map((op, index) => \n                <button key={index} className=\"option\" onClick={() => evaluate(op)}>{String(op)}</button>\n            ) : null }\n        </div>\n    );\n}\n\nexport default Options;","import React from 'react';\n\nconst Score = ({points}) => {\n    return (\n        <div className=\"points-container\">\n            <p className=\"points-text\">YOU SCORED</p>\n            <p className=\"points\">{points}</p>\n        </div>\n    );\n}\n\nexport default Score;","import React, {useState, useEffect, useRef} from 'react';\nimport Timer from './gamepage/Timer';\nimport Expression from './gamepage/Expression';\nimport Options from './gamepage/Options';\nimport Score from './gamepage/Score';\n\n\nfunction GamePage(props) {\n    const [mathOp, setMathOp] = useState(\"+\");\n    const [exp, setExp] = useState([]);\n    const [timeOver, setTimeOver] = useState(false);\n    const points = useRef();\n\n    const generateExpression = () => {\n        setExp([getNum(10), mathOp, getNum(10)]);\n    };\n\n    const getNum = (max) => {\n        let n = Math.floor(Math.random() * max);\n        while(n === 0) n = Math.floor(Math.random() * max);\n        return n;\n    }\n\n    useEffect(() => {\n        generateExpression();\n        points.current = 0;\n    }, []);\n\n    const answer = (correct) => {\n        if(correct) points.current++;\n        else points.current--;\n        generateExpression();\n    }\n\n    const handleReset = () => {\n        generateExpression();\n        setTimeOver(false);\n        points.current = 0;\n    };\n\n    return (\n        <div className=\"container\">\n            <Timer onReset={handleReset} setTimeOver={setTimeOver}/>\n            {\n                !timeOver ? \n                    <>\n                        <Expression exp={exp} />\n                        <Options exp={exp} answer={answer} random={getNum}/>                    \n                    </>\n                    : \n                    <Score points={points.current}/>\n                }\n        </div>\n    );\n}\n\nexport default GamePage;","import './App.css';\nimport GamePage from './components/GamePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GamePage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}